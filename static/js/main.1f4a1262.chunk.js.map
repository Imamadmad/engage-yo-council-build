{"version":3,"sources":["mail.ts","Card.tsx","drawmap.tsx","modal.style.tsx","modal.tsx","confirmation-modal.style.tsx","confirmation-modal.tsx","useModal.tsx","SearchInput.tsx","map.tsx","serviceWorker.ts","index.tsx"],"names":["makeMailtoUri","data","encodeURI","mailAddress","encodeURIComponent","subject","body","Card","props","survey","item","imgSrc","Link","console","log","Category","Surveylink","style","display","height","width","margin","padding","src","href","marginLeft","target","marginTop","alt","Title","MailtoElement","Councilname","Fulldescription","mailtoDataAgree","Email","mailtoDataDisagree","alignItems","rowToFeedbackItem","row","id","parseInt","Longitude","parseFloat","Latitude","Emailcontactname","Phonenumber","OpenUnderreviewclosed","processData","allRows","rowData","r","length","cell","val","col","push","drawmap","map","addControl","mapboxgl","NavigationControl","FullscreenControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","removeMarkers","markers","marker","remove","drawMarkers","points","filter","point","feedbackItem","popup","Popup","offset","setHTML","renderToString","markerOptions","color","Marker","setLngLat","setPopup","addTo","drawMarker","Wrapper","styled","div","Backdrop","StyledModal","Header","HeaderText","CloseButton","button","Content","Modal","isShown","hide","modalContent","headerText","modal","Fragment","onClick","ReactDOM","createPortal","document","ConfirmationButtons","Message","ConfirmationModal","message","useModal","useState","setIsShown","toggle","suggestedSearches","SearchInput","onSearchTermUpdated","searchTerm","setSearchTerm","useEffect","type","onChange","e","value","suggestion","onConfirm","onCancel","params","URLSearchParams","window","location","search","paramLat","get","paramLon","latitude","longitude","lat","lon","initialState","viewport","zoom","Map","state","updateViewport","setState","prevState","resize","innerHeight","inputChange","text","newFilteredPoints","toLowerCase","includes","filteredPoints","buttonClick","addEventListener","this","nextProps","nextState","removeEventListener","Promise","resolve","reject","fetch","then","res","json","result","spData","feed","entry","rows","feedbackItems","className","mapStyle","ref","getMap","mapboxApiAccessToken","onViewportChange","v","position","right","bottom","React","Boolean","hostname","match","App","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kVAMO,SAASA,EAAcC,GAC5B,MAAM,UAAN,OAAiBC,UAAUD,EAAKE,aAAhC,oBAAwDC,mBAAmBH,EAAKI,SAAhF,iBAAiGD,mBAAmBH,EAAKK,OCC5G,SAASC,EAAKC,GAAe,IAsBpCC,EArBGC,EAAQF,EAARE,KAEHC,EAAM,kEAA8DD,EAAKE,MAE7E,OADAC,QAAQC,IAAIH,GACJD,EAAKK,UACT,IAAK,OACHJ,EAAQ,+EACR,MACF,IAAK,UACHA,EAAS,6DACT,MACF,IAAK,QACHA,EAAQ,0DACR,MACF,IAAK,SACHA,EAAQ,yDACR,MACF,IAAK,UACHA,EAAS,oEAiBf,OAbID,EAAKM,aACLP,EAAS,yBAAKQ,MAAO,CACjBC,QAAS,SAET,yBACIC,OAAQ,GACRC,MAAO,GACPH,MAAO,CAACI,OAAQ,QAASC,QAAS,GAClCC,IAAI,sDAPH,eAQU,uBAAGC,KAAMd,EAAKM,WAAYC,MAAO,CAACQ,WAAY,GAAIC,OAAO,UAAzD,aAKnB,6BACI,yBAAKT,MAAO,CACRC,QAAS,OACTG,OAAQ,UAER,yBACIE,IAAKZ,EACLQ,OAAQ,GACRC,MAAO,GACPH,MAAO,CAACI,OAAQ,UAAWM,UAAW,GACtCC,IAAI,SAER,wBAAIX,MAAO,CAACI,OAAQ,EAAGM,UAAW,IAAI,uBAAGH,KAAMd,EAAKE,KAAMc,OAAO,UAAWhB,EAAKmB,SAEpFpB,EACD,kBAACqB,EAAD,CAAepB,KAAMA,IACrB,uBAAGO,MAAO,CAACQ,WAAY,IAAKf,EAAKqB,aACjC,uBAAGd,MAAO,CAACQ,WAAY,IAAKf,EAAKsB,kBAK7C,SAASF,EAActB,GACrB,IAAME,EAAOF,EAAME,KACbuB,EAA8CvB,EAAKwB,MAAQ,CAC/D/B,YAAaO,EAAKwB,MAClB7B,QAAQ,wBAAD,OAA0BK,EAAKmB,OAAS,6CAC/CvB,KAAK,uEAAD,OAAyEI,EAAKE,KAA9E,wEACF,KACEuB,EAAiDzB,EAAKwB,MAAQ,CAClE/B,YAAaO,EAAKwB,MAClB7B,QAAQ,wBAAD,OAA0BK,EAAKmB,OAAS,6CAC/CvB,KAAK,6EAAD,OAA+EI,EAAKE,KAApF,wEAEF,KACJ,OAAOqB,GAAmBE,EAEjB,yBAAKlB,MAAO,CACRC,QAAQ,OACRkB,WAAY,SACZf,OAAQ,UAER,yBACCF,OAAQ,GACRC,MAAO,GACPH,MAAO,CAACI,OAAQ,QAASC,QAAS,GAClCC,IAAI,0EATT,sBAWI,uBAAGC,KAAMxB,EAAciC,IAAkB,0CACxC,uBAAGT,KAAMxB,EAAcmC,IAAqB,8CAUnD,KCtEF,SAASE,EAAkBC,GAChC,MAAO,CACLC,GAAIC,SAASF,EAAI,IACjBP,YAAaO,EAAI,GACjBG,UAAWC,WAAWJ,EAAI,IAC1BK,SAAUD,WAAWJ,EAAI,IACzBT,MAAOS,EAAI,GACX1B,KAAM0B,EAAI,GACVM,iBAAkBN,EAAI,GACtBJ,MAAOI,EAAI,GACXO,YAAaP,EAAI,GACjBtB,WAAuB,SAAXsB,EAAI,GAAgB,GAAKA,EAAI,GACzCN,gBAAiBM,EAAI,IACrBQ,sBAAuBR,EAAI,IAC3BvB,SAAUuB,EAAI,KAAO,IAmClB,SAASS,EAAY9C,GAK1B,IAHA,IAAI+C,EAAU,GACVC,EAAU,GAELC,EAAI,EAAGA,EAAIjD,EAAKkD,OAAQD,IAAK,CACpC,IAAIE,EAAOnD,EAAKiD,GAAL,QACPG,EAAMD,EAAI,GACE,GAAZA,EAAKE,MAEHL,EAAQ,IAAoB,MAAdA,EAAQ,IACxBD,EAAQO,KAAKN,GAEfA,EAAU,IAEZA,EAAQM,KAAKF,GAKf,OAHIJ,EAAQ,IAAoB,MAAdA,EAAQ,IACxBD,EAAQO,KAAKN,GAERD,EAGF,SAASQ,EAAQC,GACtBA,EAAIC,WAAW,IAAIC,IAASC,mBAC5BH,EAAIC,WAAW,IAAIC,IAASE,mBAE5BJ,EAAIC,WAAW,IAAIC,IAASG,iBAAiB,CAC3CC,gBAAiB,CACfC,oBAAoB,GAEtBC,mBAAmB,KAmBhB,SAASC,EAAcC,GAC5BA,EAAQV,KAAI,SAAAW,GAAM,OAAIA,EAAOC,YAGxB,SAASC,EAAYb,EAAmBc,GAkB7C,OANgBA,EACbC,QAAO,SAAAC,GAAK,OAAIA,EAAM9B,UAAY8B,EAAMhC,aACxCgB,KAAI,SAACiB,GACJ,OApGC,SAAoBhE,EAAoB+C,GACU/C,EAA/CmB,MAA+CnB,EAAxCE,KADmE,IAC7D+B,EAAkCjC,EAAlCiC,SAAUF,EAAwB/B,EAAxB+B,UAAW1B,EAAaL,EAAbK,SACtC4D,EAAQ,IAAIhB,IAASiB,MAAM,CAAEC,OAAQ,KACtCC,QAAQC,yBACP,kBAACxE,EAAD,CAAMG,KAAMA,MAGZsE,EAAoC,GACxC,OAAQjE,GACN,IAAK,OACHiE,EAAcC,MAAQ,QACtB,MACF,IAAK,UACHD,EAAcC,MAAQ,OACtB,MACF,IAAK,QACHD,EAAcC,MAAQ,MACtB,MACF,IAAK,SACHD,EAAcC,MAAQ,SACtB,MACF,IAAK,UACHD,EAAcC,MAAQ,OAG1B,OAAO,IAAItB,IAASuB,OAAOF,GACxBG,UAAU,CAACxC,EAAUF,IACrB2C,SAAST,GACTU,MAAM5B,GAwEE6B,CAAWZ,EAAcjB,M,oxCCvJ/B,IAAM8B,EAAUC,IAAOC,IAAV,KASPC,EAAWF,IAAOC,IAAV,KASRE,EAAcH,IAAOC,IAAV,KAOXG,EAASJ,IAAOC,IAAV,KAMNI,EAAaL,IAAOC,IAAV,KAMVK,EAAcN,IAAOO,OAAV,KAUXC,EAAUR,IAAOC,IAAV,KC/BPQ,EAAuC,SAAC,GAK9C,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,WAEMC,EACJ,kBAAC,IAAMC,SAAP,KACE,kBAACb,EAAD,MACA,kBAACH,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KAAaQ,GACb,kBAACP,EAAD,CAAaU,QAASL,GAAtB,MAEF,kBAACH,EAAD,KAAUI,MAKlB,OAAOF,EAAUO,IAASC,aAAaJ,EAAOK,SAASrG,MAAQ,M,qkBCpC1D,IAAMsG,EAAsBpB,IAAOC,IAAV,KAInBoB,EAAUrB,IAAOC,IAAV,KCEPqB,GDGYtB,IAAOO,OAAV,KAOEP,IAAOO,OAAV,KCVuD,SAACvF,GAC3E,OACE,kBAAC,IAAM+F,SAAP,KACE,kBAACM,EAAD,KAAUrG,EAAMuG,SAChB,kBAACH,EAAD,SCVOI,EAAW,WAAO,IAAD,EACEC,oBAAkB,GADpB,mBACrBf,EADqB,KACZgB,EADY,KAG5B,MAAO,CACLhB,UACAiB,OAHa,kBAAMD,GAAYhB,MCE7BkB,EAAoB,CAAC,QAAS,OAAQ,SAAU,WAMzCC,GAAmD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACvDL,mBAAiB,IADsC,mBACpFM,EADoF,KACxEC,EADwE,OAE/DR,IAApBd,EAFmF,EAEnFA,QAASiB,EAF0E,EAE1EA,OAIjBM,qBAAU,WACRH,EAAoBC,KACnB,CAACA,IASJ,OACE,oCACE,yBAAKhF,GAAG,oBACN,uCACA,2BACEmF,KAAK,OACLC,SAAU,SAACC,GAAD,OACRJ,EAAcI,EAAElG,OAAOmG,QAEzBA,MAAON,KAIX,yBAAKhF,GAAG,sBAlBH6E,EAAkB3D,KAAI,SAACqE,GAAD,OAC3B,4BAAQtB,QAAS,kBAAMgB,EAAcM,KAAcA,OAkBnD,+DACA,4BAAQtB,QAASW,GAAjB,cACA,kBAAC,EAAD,CACEjB,QAASA,EACTC,KAAMgB,EACNd,WAAW,oBACXD,aACE,kBAAC,EAAD,CACE2B,UApCQ,kBAAMZ,KAqCda,SApCO,kBAAMb,KAqCbJ,QAAO,mqBCnBbkB,GAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7CC,GAAWL,GAAOM,IAAI,OACtBC,GAAWP,GAAOM,IAAI,OAEtBE,GAAWH,GAAW9F,SAAS8F,KAAa,QAC5CI,GAAYF,GAAWhG,SAASgG,IAAY,SAElD3H,QAAQC,IAAI,UACZD,QAAQC,IAAI,CAAC6H,IAAKL,GAAUM,IAAKJ,KAIjC,IAAMK,GAAsB,CAC1BC,SAAU,CAGRJ,aACAD,YACAM,KAAM,KAOGC,GAAb,4MACSC,MAAeJ,GADxB,EAwDSK,eAAiB,SAACJ,GACvB,EAAKK,UAAS,SAACC,GAAD,MAAgB,CAC5BN,SAAS,2BAAMM,EAAUN,UAAaA,QA1D5C,EA8DSO,OAAS,WACd,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5BN,SAAS,2BACJM,EAAUN,UADP,IAEN3H,OAAQgH,OAAOmB,mBAlEvB,EAwEUC,YAAc,SAACC,GAKrB,GAFA3I,QAAQC,IAAI,CAAE0I,SAET,EAAKP,MAAM1E,OAAhB,CAIA,IAAMkF,EAAoB,EAAKR,MAAM1E,OAAOC,QAAO,SAACC,GAAD,uBACjDA,EAAM5C,aAD2C,aACjD,EAAa6H,cAAcC,SAASH,EAAKE,kBAG3C7I,QAAQC,IAAI,wBAAyB,EAAKmI,MAAM1E,OAAOpB,QACvDtC,QAAQC,IAAI,iCAAkC2I,EAAkBtG,QAEhE,EAAKgG,SAAS,CAEZS,eAAgBH,MA1FtB,EA6FUI,YAAc,SAACjC,GACjB,EAAKqB,MAAM9E,SACbD,EAAc,EAAK+E,MAAM9E,UA/F/B,kEAIIgE,OAAO2B,iBAAiB,SAAUC,KAAKV,QACvCU,KAAKV,WALT,0FAQmCW,EAAgBC,GARnD,oFASSA,EAAUxG,KAAQwG,EAAUL,eATrC,iDAaSG,KAAKd,MAAM9E,SAAY8F,EAAU9F,UACpCtD,QAAQC,IAAI,uBACJ2C,EAAwBwG,EAAxBxG,IAAKmG,EAAmBK,EAAnBL,eACbpG,EAAQC,GACFU,EAAUG,EAAYb,EAAKmG,GACjCG,KAAKZ,SAAS,CACZhF,aAKF4F,KAAKd,MAAM9E,SACX4F,KAAKd,MAAMW,iBAAmBK,EAAUL,iBAExC/I,QAAQC,IAAI,qBACJ2C,EAAwBwG,EAAxBxG,IAAKmG,EAAmBK,EAAnBL,eACb1F,EAAc6F,KAAKd,MAAM9E,SACnBA,EAAUG,EAAYb,EAAKmG,GACjCG,KAAKZ,SAAS,CACZhF,aAhCR,sJAsCIgE,OAAO+B,oBAAoB,SAAUH,KAAKV,UAtC9C,iLPpDS,IAAIc,SAAQ,SAACC,EAASC,GAE3BC,MADY,qHAETC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,EAAQM,SO+ChB,OA0CUzK,EA1CV,OA2CU0K,EAAS1K,EAAK2K,KAAKC,MACnBC,EAAO/H,EAAY4H,GACzB9J,QAAQC,IAAI,iBACZD,QAAQC,IAAI,CAAEgK,SAERC,EAAgCD,EAAKrH,IAAIpB,GAC/CxB,QAAQC,IAAI,CAAEiK,kBACdhB,KAAKZ,SAAS,CACZ5E,OAAQwG,EAERnB,eAAgBmB,IArDtB,sIAmGmB,IAAD,OACNjC,EAAaiB,KAAKd,MAAlBH,SACR,OACE,uBAAKvG,GAAG,aACN,uBAAKA,GAAG,kBACN,gBAAC,GAAD,CAAa+E,oBAAqByC,KAAKR,eAEzC,uBAAKhH,GAAG,OACN,gBAAC,IAAD,eACEnB,MAAO,OACPD,OAAQ,OACR6J,UAAW,YACPlC,EAJN,CAKEmC,SAAU,qCACVC,IAAK,SAACA,GAAD,OACHA,IAAQ,EAAKjC,MAAMxF,KAAO,EAAK0F,SAAS,CAAE1F,IAAKyH,EAAIC,YAErDC,qBA7JV,yFA8JUC,iBAAkB,SAACC,GAAD,OAAiB,EAAKpC,eAAeoC,MAEvD,uBAAKrK,MAAO,CAAEsK,SAAU,WAAYC,MAAO,GAAIC,OAAQ,KACrD,gBAAC,IAAD,CAAmBJ,iBAAkBtB,KAAKb,yBAxHxD,GAAyBwC,aC9CLC,QACW,cAA7BxD,OAAOC,SAASwD,UAEe,UAA7BzD,OAAOC,SAASwD,UAEhBzD,OAAOC,SAASwD,SAASC,MACvB,2DCRN,IAAMC,GAAyB,WAAO,IAAD,EACP9E,IADO,EAC3Bd,QAD2B,EAClBiB,OAGjB,OACE,kBAAC,IAAMZ,SAAP,KACI,kBAAC,GAAD,QAIRwF,iBAAO,kBAAC,GAAD,MAASpF,SAASqF,eAAe,SDuHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1L,QAAQ0L,MAAMA,EAAMxF,c","file":"static/js/main.1f4a1262.chunk.js","sourcesContent":["export interface MailtoDataUnencoded {\n  mailAddress: string,\n  subject: string,\n  body: string\n}\n\nexport function makeMailtoUri(data: MailtoDataUnencoded) {\n  return `mailto:${encodeURI(data.mailAddress)}?subject=${encodeURIComponent(data.subject)}&body=${encodeURIComponent(data.body)}`;\n}\n","import React from 'react';\nimport { FeedbackItem } from './drawmap';\nimport { MailtoDataUnencoded, makeMailtoUri } from './mail';\n\ninterface Props {\n    item: FeedbackItem\n}\n\nexport default function Card(props: Props) {\n    const {item} = props;\n \n    let imgSrc = `https://s2.googleusercontent.com/s2/favicons?domain_url=${item.Link}`;\n    console.log(imgSrc)\n    switch (item.Category) {\n        case 'park':\n          imgSrc= 'https://i.pinimg.com/originals/20/54/42/205442f452d956de1fae3d8fb7c90d10.png';\n          break;\n        case 'traffic':\n          imgSrc = 'https://img.icons8.com/android/24/000000/traffic-light.png';\n          break;\n        case 'cycle':\n          imgSrc ='https://img.icons8.com/cotton/64/000000/bicycle--v1.png';\n          break;\n        case 'retail':\n          imgSrc= 'https://img.icons8.com/pastel-glyph/64/000000/shop.png';\n          break;\n        case 'housing':\n          imgSrc = 'https://img.icons8.com/material-rounded/24/000000/cottage--v2.png'\n      }\n\n    let survey: React.ReactNode | undefined;\n    if (item.Surveylink) {\n        survey = <div style={{\n            display: 'flex',\n        }}>\n            <img \n                height={16}\n                width={16}\n                style={{margin: '0 4px', padding: 2}}\n                src=\"https://img.icons8.com/wired/64/000000/survey.png\"/>\n               Fill in the <a href={item.Surveylink} style={{marginLeft: 4}} target=\"_blank\"> survey</a>\n        </div>\n    }\n    \n    return (\n        <div>\n            <div style={{\n                display: 'flex',\n                margin: '8px 0'\n            }}>\n                <img \n                    src={imgSrc}\n                    height={20}\n                    width={20}\n                    style={{margin: '0px 4px', marginTop: 4}}\n                    alt=\"icon\"\n                />\n                <h2 style={{margin: 0, marginTop: 4}}><a href={item.Link} target=\"_blank\" >{item.Title}</a></h2>\n            </div>\n            {survey}\n            <MailtoElement item={item} />\n            <p style={{marginLeft: 4}}>{item.Councilname}</p>\n            <p style={{marginLeft: 4}}>{item.Fulldescription}</p>\n        </div>\n    );\n}\n\nfunction MailtoElement(props: {item: FeedbackItem}) {\n  const item = props.item;\n  const mailtoDataAgree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my support for the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n  } : null;\n  const mailtoDataDisagree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my disagreement with the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n\n  } : null;\n  return mailtoDataAgree && mailtoDataDisagree\n       ? (\n           <div style={{\n               display:'flex',\n               alignItems: 'center',\n               margin: '8px 0'\n           }}>\n               <img \n                height={16}\n                width={16}\n                style={{margin: '0 4px', padding: 2}}\n                src=\"https://img.icons8.com/material-outlined/24/000000/important-mail.png\"/>\n               Email your thoughts\n               <a href={makeMailtoUri(mailtoDataAgree)}><button>Agree</button></a>\n                <a href={makeMailtoUri(mailtoDataDisagree)}><button>Disagree</button></a>\n           </div>\n        //     <p>\n        //    <a href={makeMailtoUri(mailtoDataAgree)}>I agree \n        //    </a> / \n        //    <a href={makeMailtoUri(mailtoDataDisagree)}>I disagree \n        //     <img src=\"https://img.icons8.com/cotton/64/000000/thumbs-down--v4.png\" height={12}/>\n        //    </a>\n        // </p>\n        )\n       : null;\n}\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { renderToString } from 'react-dom/server'\nimport Card from './Card';\n\nexport function getDataFromSheet(): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = 'https://spreadsheets.google.com/feeds/cells/1EWTcF12D3xEDRzAFtX_xhxZKwmWHI-88pGmQGGsKYR0/1/public/values?alt=json';\n    fetch(url)\n      .then(res => res.json())\n      .then(result => {\n        resolve(result);\n      });\n  });\n}\n\nexport type SurveyStatus = 'Open' | 'Closed' | 'Under review';\n\nexport interface FeedbackItem {\n  id: number;\n  Latitude: number;\n  Longitude: number;\n  Councilname?: string;\n  Title?: string,\n  Link?: string,\n  Emailcontactname?: string;\n  Email?: string;\n  Phonenumber?: string;\n  Surveylink?: string\n  Fulldescription?: string\n  OpenUnderreviewclosed?: SurveyStatus\n  Category?: string;\n}\n\nexport function rowToFeedbackItem(row: string[]): FeedbackItem {\n  return {\n    id: parseInt(row[0]),\n    Councilname: row[1],\n    Longitude: parseFloat(row[2]),\n    Latitude: parseFloat(row[3]),\n    Title: row[4],\n    Link: row[5],\n    Emailcontactname: row[6],\n    Email: row[7],\n    Phonenumber: row[8],\n    Surveylink: row[9] === 'null' ? '' : row[9],\n    Fulldescription: row[10],\n    OpenUnderreviewclosed: row[11] as SurveyStatus, // YOLO\n    Category: row[12] || '',\n  }\n}\n\nexport function drawMarker(item: FeedbackItem, map: mapboxgl.Map): mapboxgl.Marker {\n  const { Title, Link, Latitude, Longitude, Category } = item;\n  var popup = new mapboxgl.Popup({ offset: 25 })\n    .setHTML(renderToString(\n      <Card item={item} />\n    ));\n\n  let markerOptions: { color?: string } = {};\n  switch (Category) {\n    case 'park':\n      markerOptions.color = 'green';\n      break;\n    case 'traffic':\n      markerOptions.color = 'grey';\n      break;\n    case 'cycle':\n      markerOptions.color = 'red';\n      break;\n    case 'retail':\n      markerOptions.color = 'orange';\n      break;\n    case 'housing':\n      markerOptions.color = 'blue'\n  }\n\n  return new mapboxgl.Marker(markerOptions)\n    .setLngLat([Latitude, Longitude])\n    .setPopup(popup) // sets a popup on this marker\n    .addTo(map);\n}\n// Data is the spdata thing, returns list of things\nexport function processData(data: any): string[][] {\n  // var table = drawTable(parent);\n  let allRows = [];\n  var rowData = [];\n\n  for (var r = 0; r < data.length; r++) {\n    var cell = data[r][\"gs$cell\"];\n    var val = cell[\"$t\"];\n    if (cell.col == 1) {\n      // drawRow(table, rowData);\n      if (rowData[0] && rowData[0] != \"id\") {\n        allRows.push(rowData);\n      }\n      rowData = [];\n    }\n    rowData.push(val);\n  }\n  if (rowData[0] && rowData[0] != \"id\") {\n    allRows.push(rowData);\n  }\n  return allRows;\n}\n\nexport function drawmap(map: mapboxgl.Map): void {\n  map.addControl(new mapboxgl.NavigationControl());\n  map.addControl(new mapboxgl.FullscreenControl());\n  // Add geolocate control to the map.\n  map.addControl(new mapboxgl.GeolocateControl({\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true\n  }));\n\n  // map.on('moveend', function (originalEvent) {\n  //   const { lat, lng } = map.getCenter();\n  //   console.log('A moveend event occurred.');\n  //   console.log({ lat, lng })\n\n\n  //   // eg https://localhost:3000\n  //   const location = window.location.origin\n  //   console.log({ location });\n\n  //   // @ts-ignore\n  //   window.history.pushState({\n  //     id: 'homepage'\n  //   }, 'Home | My App', `${location}/engage-yo-council-build/?lat=${lat}&lon=${lng}`);\n  // });\n}\nexport function removeMarkers(markers: mapboxgl.Marker[]): void {\n  markers.map(marker => marker.remove());\n}\n\nexport function drawMarkers(map: mapboxgl.Map, points: FeedbackItem[]): mapboxgl.Marker[] {\n\n  // Draw demo marker\n  // const popup = new mapboxgl.Popup({ offset: 25 })\n  //   .setHTML(\"<h1>Dummy pop up cycleway!</h1><br><a href='https://www.surveymonkey.com/r/popupcycleways'>https://www.surveymonkey.com/r/popupcycleways</a></h1>\")\n  // .setText(\"test\")\n\n  // const marker = new mapboxgl.Marker()\n  //   .setLngLat([151.2093, -33.8688])\n  //   .setPopup(popup) // sets a popup on this marker\n  //   .addTo(map);\n\n  const markers = points\n    .filter(point => point.Latitude && point.Longitude)\n    .map((feedbackItem: FeedbackItem) => {\n      return drawMarker(feedbackItem, map);\n    });\n\n  return markers;\n}","import styled from 'styled-components';\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 700;\n  width: inherit;\n  outline: 0;\n`;\nexport const Backdrop = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.3);\n  z-index: 500;\n`;\nexport const StyledModal = styled.div`\n  z-index: 100;\n  background: white;\n  position: relative;\n  margin: auto;\n  border-radius: 8px;\n`;\nexport const Header = styled.div`\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.3rem;\n`;\nexport const HeaderText = styled.div`\n  color: #fff;\n  align-self: center;\n  color: black;\n  font-weight: bold;\n`;\nexport const CloseButton = styled.button`\n  font-size: 0.8rem;\n  border: none;\n  border-radius: 3px;\n  margin-left: 0.5rem;\n  background: none;\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Content = styled.div`\n  padding: 10px;\n  max-height: 30rem;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;","import React, { FunctionComponent, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Wrapper,\n  Header,\n  StyledModal,\n  HeaderText,\n  CloseButton,\n  Content,\n  Backdrop,\n} from './modal.style';\nexport interface ModalProps {\n  isShown: boolean;\n  hide: () => void;\n  modalContent: JSX.Element;\n  headerText: string;\n}\nexport const Modal: FunctionComponent<ModalProps> = ({\n  isShown,\n  hide,\n  modalContent,\n  headerText,\n}) => {\n  const modal = (\n    <React.Fragment>\n      <Backdrop />\n      <Wrapper>\n        <StyledModal>\n          <Header>\n            <HeaderText>{headerText}</HeaderText>\n            <CloseButton onClick={hide}>X</CloseButton>\n          </Header>\n          <Content>{modalContent}</Content>\n        </StyledModal>\n      </Wrapper>\n    </React.Fragment>\n  );\n  return isShown ? ReactDOM.createPortal(modal, document.body) : null;\n};","import styled from 'styled-components';\nexport const ConfirmationButtons = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport const Message = styled.div`\n  font-size: 0.9rem;\n  margin-bottom: 10px;\n  text-align: left;\n`;\nexport const YesButton = styled.button`\n  width: 6rem;\n  background-color: yellow;\n  :hover {\n    background-color: red;\n  }\n`;\nexport const NoButton = styled.button`\n  width: 3rem;\n  background-color: lightgrey;\n  :hover {\n    background-color: grey;\n  }\n`;","import React, { FunctionComponent } from 'react';\nimport { ConfirmationButtons, Message, YesButton, NoButton } from './confirmation-modal.style';\ninterface ConfirmationModalProps {\n  onConfirm: () => void;\n  onCancel: () => void;\n  message: string;\n}\nexport const ConfirmationModal: FunctionComponent<ConfirmationModalProps> = (props) => {\n  return (\n    <React.Fragment>\n      <Message>{props.message}</Message>\n      <ConfirmationButtons>\n      </ConfirmationButtons>\n    </React.Fragment>\n  );\n};","import { useState } from 'react';\nexport const useModal = () => {\n  const [isShown, setIsShown] = useState<boolean>(false);\n  const toggle = () => setIsShown(!isShown);\n  return {\n    isShown,\n    toggle,\n  };\n};","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { Modal } from './modal';\nimport { ConfirmationModal } from './confirmation-modal';\nimport { useModal } from './useModal';\n\nconst suggestedSearches = [\"Cycle\", \"Park\", \"Zoning\", \"Traffic\"];\n\ntype SearchInputProps = {\n  onSearchTermUpdated: (term: string) => void;\n};\n\nexport const SearchInput: FunctionComponent<SearchInputProps> = ({ onSearchTermUpdated }) => {\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const { isShown, toggle } = useModal();\n  const onConfirm = () => toggle();\n  const onCancel = () => toggle();\n\n  useEffect(() => {\n    onSearchTermUpdated(searchTerm);\n  }, [searchTerm]);\n\n  const renderSearchSuggestions = () => {\n\n    return suggestedSearches.map((suggestion) => (\n      <button onClick={() => setSearchTerm(suggestion)}>{suggestion}</button>\n    ));\n  };\n\n  return (\n    <>\n      <div id=\"search_container\">\n        <h3>Search:</h3>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setSearchTerm(e.target.value)\n          }\n          value={searchTerm}\n        />\n      </div>\n     \n      <div id=\"search_suggestions\">{renderSearchSuggestions()}</div>\n      <p>Want to know about this project?</p>\n      <button onClick={toggle}>Learn More</button>\n      <Modal\n        isShown={isShown}\n        hide={toggle}\n        headerText=\"Engage yo council\"\n        modalContent={\n          <ConfirmationModal\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            message={`\n              Living in Sydney we get the chance to participate in all the local decisions that\n              happen in the area that we live. Proposals are sent from the council into our mailbox,\n              and we generally ignore them, and if we do read them, we can't be bothered writing a letter\n              or sending an email to give feedback on the proposal.\\n\\n\n\n              We built this tool as a way to clearly see what proposals are open in your local areas.\n              You can search via the map or the search bar. If you want to have your say you can either\n              email the local government or fill in a survey.\n            `}\n          />\n        }\n      />\n\n    </>\n  );\n};\n","import * as React from \"react\";\nimport ReactMapGL, { NavigationControl } from \"react-map-gl\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./App.css\";\nimport { isCompositeComponent } from \"react-dom/test-utils\";\nimport {\n  drawmap,\n  FeedbackItem,\n  rowToFeedbackItem,\n  processData,\n  getDataFromSheet,\n  drawMarkers,\n  removeMarkers,\n} from \"./drawmap\";\nimport { SearchInput } from \"./SearchInput\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiamFrZWMiLCJhIjoiY2tkaHplNGhjMDAyMDJybW4ybmRqbTBmMyJ9.AR_fnEuka8-cFb4Snp3upw\";\ninterface State {\n  viewport: {\n    longitude: number;\n    latitude: number; // starting position\n    zoom: number;\n    // height: number;\n    // width: number;\n  };\n  map?: mapboxgl.Map;\n  points?: FeedbackItem[];\n  markers?: mapboxgl.Marker[];\n  filteredPoints?: FeedbackItem[];\n}\n\n\nconst params = new URLSearchParams(window.location.search)\nconst paramLat = params.get('lat');\nconst paramLon = params.get('lon')\n\nconst latitude = paramLat ? parseInt(paramLat) : -33.8688;\nconst longitude = paramLon ? parseInt(paramLon) : 151.2093;\n\nconsole.log(\"PARAMS\");\nconsole.log({lat: paramLat, lon: paramLon});\n\n// console.log({params});\n\nconst initialState: State = {\n  viewport: {\n    // longitude: 151.2093,\n    // latitude: -33.8688, // starting position\n    longitude,\n    latitude, // starting position\n    zoom: 13,\n    // height: 400,\n    // width: 400\n  },\n};\n\ntype Viewport = typeof initialState.viewport;\nexport class Map extends React.Component<{}, State> {\n  public state: State = initialState;\n\n  public componentDidMount() {\n    window.addEventListener(\"resize\", this.resize);\n    this.resize();\n  }\n\n  async UNSAFE_componentWillUpdate(nextProps: any, nextState: State) {\n    if (!nextState.map || !nextState.filteredPoints) {\n      return;\n    }\n    // If we haven't drawn any markers before, draw them AND the map\n    if (!this.state.markers && !nextState.markers) {\n      console.log(\"Initial draw of map\");\n      const { map, filteredPoints } = nextState;\n      drawmap(map);\n      const markers = drawMarkers(map, filteredPoints);\n      this.setState({\n        markers,\n      });\n    }\n    // If we HAVE drawn markers before, and the points are different, remove then draw them\n    if (\n      this.state.markers &&\n      this.state.filteredPoints !== nextState.filteredPoints\n    ) {\n      console.log(\"Redrawing markers\");\n      const { map, filteredPoints } = nextState;\n      removeMarkers(this.state.markers);\n      const markers = drawMarkers(map, filteredPoints);\n      this.setState({\n        markers,\n      });\n    }\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize);\n  }\n\n  public async componentWillMount() {\n    const data = await getDataFromSheet();\n    const spData = data.feed.entry;\n    const rows = processData(spData);\n    console.log(\"All raw rows:\");\n    console.log({ rows });\n\n    const feedbackItems: FeedbackItem[] = rows.map(rowToFeedbackItem);\n    console.log({ feedbackItems });\n    this.setState({\n      points: feedbackItems,\n      // Initially, show all points\n      filteredPoints: feedbackItems,\n    });\n  }\n  public updateViewport = (viewport: Viewport) => {\n    this.setState((prevState) => ({\n      viewport: { ...prevState.viewport, ...viewport },\n    }));\n  };\n\n  public resize = () => {\n    this.setState((prevState) => ({\n      viewport: {\n        ...prevState.viewport,\n        height: window.innerHeight,\n        // width: window.innerWidth,\n      },\n    }));\n  };\n\n  private inputChange = (text: string) => {\n    // private inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // const text: string = e.target.value;\n    console.log({ text });\n\n    if (!this.state.points) {\n      return;\n    }\n\n    const newFilteredPoints = this.state.points.filter((point) =>\n      point.Title?.toLowerCase().includes(text.toLowerCase())\n    );\n\n    console.log(\"Length of ALL points:\", this.state.points.length);\n    console.log(\"Length of new filtered points:\", newFilteredPoints.length);\n\n    this.setState({\n      // Initially, show all points\n      filteredPoints: newFilteredPoints,\n    });\n  };\n  private buttonClick = (e: any) => {\n    if (this.state.markers) {\n      removeMarkers(this.state.markers);\n    }\n  };\n\n  public render() {\n    const { viewport } = this.state;\n    return (\n      <div id=\"container\">\n        <div id=\"search_overlay\">\n          <SearchInput onSearchTermUpdated={this.inputChange} />\n        </div>\n        <div id=\"map\">\n          <ReactMapGL\n            width={\"100%\"}\n            height={\"100%\"}\n            className={\"mapClass\"}\n            {...viewport}\n            mapStyle={\"mapbox://styles/mapbox/streets-v11\"}\n            ref={(ref) =>\n              ref && !this.state.map && this.setState({ map: ref.getMap() })\n            }\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            onViewportChange={(v: Viewport) => this.updateViewport(v)}\n          >\n            <div style={{ position: \"absolute\", right: 30, bottom: 30 }}>\n              <NavigationControl onViewportChange={this.updateViewport} />\n            </div>\n          </ReactMapGL>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\nimport React, { Component, FunctionComponent, useState } from 'react';\nimport './index.css';\nimport {Map} from './map';\nimport * as serviceWorker from './serviceWorker';\nimport { Modal } from './modal';\nimport { ConfirmationModal } from './confirmation-modal';\nimport { useModal } from './useModal';\n\nconst App: FunctionComponent = () => {\n  const { isShown, toggle } = useModal();\n  const onConfirm = () => toggle();\n  const onCancel = () => toggle();\n  return (\n    <React.Fragment>\n        <Map />\n    </React.Fragment>\n  );\n};\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}