{"version":3,"sources":["mail.ts","Card.tsx","drawmap.tsx","modal.style.tsx","modal.tsx","confirmation-modal.style.tsx","confirmation-modal.tsx","useModal.tsx","SearchInput.tsx","map.tsx","serviceWorker.ts","index.tsx"],"names":["makeMailtoUri","data","encodeURI","mailAddress","encodeURIComponent","subject","body","Card","props","item","imgSrc","Link","Category","style","display","src","height","width","margin","marginTop","alt","href","target","Title","MailtoElement","Councilname","Fulldescription","mailtoDataAgree","Email","mailtoDataDisagree","rowToFeedbackItem","row","id","parseInt","Longitude","parseFloat","Latitude","Emailcontactname","Phonenumber","Surveylink","OpenUnderreviewclosed","processData","allRows","rowData","r","length","cell","val","col","push","drawmap","map","addControl","mapboxgl","NavigationControl","FullscreenControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","removeMarkers","markers","marker","remove","drawMarkers","points","filter","point","feedbackItem","popup","Popup","offset","setHTML","renderToString","markerOptions","color","Marker","setLngLat","setPopup","addTo","drawMarker","Wrapper","styled","div","Backdrop","StyledModal","Header","HeaderText","CloseButton","button","Content","Modal","isShown","hide","modalContent","headerText","modal","Fragment","onClick","ReactDOM","createPortal","document","ConfirmationButtons","Message","ConfirmationModal","message","useModal","useState","setIsShown","toggle","suggestedSearches","SearchInput","onSearchTermUpdated","searchTerm","setSearchTerm","useEffect","type","onChange","e","value","suggestion","onConfirm","onCancel","params","URLSearchParams","window","location","search","paramLat","get","paramLon","latitude","longitude","console","log","lat","lon","initialState","viewport","zoom","Map","state","updateViewport","setState","prevState","resize","innerHeight","inputChange","text","newFilteredPoints","toLowerCase","includes","filteredPoints","buttonClick","addEventListener","this","nextProps","nextState","removeEventListener","Promise","resolve","reject","fetch","then","res","json","result","spData","feed","entry","rows","feedbackItems","className","mapStyle","ref","getMap","mapboxApiAccessToken","onViewportChange","v","position","right","bottom","React","Boolean","hostname","match","App","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fe742b0a.chunk.js","sourcesContent":["export interface MailtoDataUnencoded {\n  mailAddress: string,\n  subject: string,\n  body: string\n}\n\nexport function makeMailtoUri(data: MailtoDataUnencoded) {\n  return `mailto:${encodeURI(data.mailAddress)}?subject=${encodeURIComponent(data.subject)}&body=${encodeURIComponent(data.body)}`;\n}\n","import React from 'react';\nimport { FeedbackItem } from './drawmap';\nimport { MailtoDataUnencoded, makeMailtoUri } from './mail';\n\ninterface Props {\n    item: FeedbackItem\n}\n\nexport default function Card(props: Props) {\n    const {item} = props;\n \n    let imgSrc = `https://s2.googleusercontent.com/s2/favicons?domain_url=${item.Link}`;\n    switch (item.Category) {\n        case 'park':\n          imgSrc= 'https://i.pinimg.com/originals/20/54/42/205442f452d956de1fae3d8fb7c90d10.png';\n          break;\n        case 'traffic':\n          imgSrc = 'https://img.icons8.com/android/24/000000/traffic-light.png';\n          break;\n        case 'cycle':\n          imgSrc ='https://img.icons8.com/cotton/64/000000/bicycle--v1.png';\n          break;\n        case 'retail':\n          imgSrc= 'https://img.icons8.com/pastel-glyph/64/000000/shop.png';\n          break;\n        case 'housing':\n          imgSrc = 'https://img.icons8.com/material-rounded/24/000000/cottage--v2.png'\n      }\n    \n    return (\n        <div>\n            <div style={{\n                display: 'flex',\n            }}>\n                <img \n                    src={imgSrc}\n                    height={20}\n                    width={20}\n                    style={{margin: '0px 4px', marginTop: 4}}\n                    alt=\"icon\"\n                />\n                <h2 style={{margin: 0, marginTop: 4}}><a href={item.Link} target=\"_blank\" >{item.Title}</a></h2>\n            </div>\n            <MailtoElement item={item} />\n            <p>{item.Councilname}</p>\n            <p>{item.Fulldescription}</p>\n        </div>\n    );\n}\n\nfunction MailtoElement(props: {item: FeedbackItem}) {\n  const item = props.item;\n  const mailtoDataAgree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my support for the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n  } : null;\n  const mailtoDataDisagree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my disagreement with the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n\n  } : null;\n  return mailtoDataAgree && mailtoDataDisagree\n       ? (<p>\n           <a href={makeMailtoUri(mailtoDataAgree)}>I agree \n            <img src=\"https://img.icons8.com/cotton/64/000000/thumb-up--v1.png\" height={12}/>\n           </a> / \n           <a href={makeMailtoUri(mailtoDataDisagree)}>I disagree \n            <img src=\"https://img.icons8.com/cotton/64/000000/thumbs-down--v4.png\" height={12}/>\n           </a>\n        </p>)\n       : null;\n}\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { renderToString } from 'react-dom/server'\nimport Card from './Card';\n\nexport function getDataFromSheet(): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = 'https://spreadsheets.google.com/feeds/cells/1EWTcF12D3xEDRzAFtX_xhxZKwmWHI-88pGmQGGsKYR0/1/public/values?alt=json';\n    fetch(url)\n      .then(res => res.json())\n      .then(result => {\n        resolve(result);\n      });\n  });\n}\n\nexport type SurveyStatus = 'Open' | 'Closed' | 'Under review';\n\nexport interface FeedbackItem {\n  id: number;\n  Latitude: number;\n  Longitude: number;\n  Councilname?: string;\n  Title?: string,\n  Link?: string,\n  Emailcontactname?: string;\n  Email?: string;\n  Phonenumber?: string;\n  Surveylink?: string\n  Fulldescription?: string\n  OpenUnderreviewclosed?: SurveyStatus\n  Category?: string;\n}\n\nexport function rowToFeedbackItem(row: string[]): FeedbackItem {\n  return {\n    id: parseInt(row[0]),\n    Councilname: row[1],\n    Longitude: parseFloat(row[2]),\n    Latitude: parseFloat(row[3]),\n    Title: row[4],\n    Link: row[5],\n    Emailcontactname: row[6],\n    Email: row[7],\n    Phonenumber: row[8],\n    Surveylink: row[9] === 'null' ? '' : row[9],\n    Fulldescription: row[10],\n    OpenUnderreviewclosed: row[11] as SurveyStatus, // YOLO\n    Category: row[12] || '',\n  }\n}\n\nexport function drawMarker(item: FeedbackItem, map: mapboxgl.Map): mapboxgl.Marker {\n  const { Title, Link, Latitude, Longitude, Category } = item;\n  var popup = new mapboxgl.Popup({ offset: 25 })\n    .setHTML(renderToString(\n      <Card item={item} />\n    ));\n\n  let markerOptions: { color?: string } = {};\n  switch (Category) {\n    case 'park':\n      markerOptions.color = 'green';\n      break;\n    case 'traffic':\n      markerOptions.color = 'grey';\n      break;\n    case 'cycle':\n      markerOptions.color = 'red';\n      break;\n    case 'retail':\n      markerOptions.color = 'orange';\n      break;\n    case 'housing':\n      markerOptions.color = 'blue'\n  }\n\n  return new mapboxgl.Marker(markerOptions)\n    .setLngLat([Latitude, Longitude])\n    .setPopup(popup) // sets a popup on this marker\n    .addTo(map);\n}\n// Data is the spdata thing, returns list of things\nexport function processData(data: any): string[][] {\n  // var table = drawTable(parent);\n  let allRows = [];\n  var rowData = [];\n\n  for (var r = 0; r < data.length; r++) {\n    var cell = data[r][\"gs$cell\"];\n    var val = cell[\"$t\"];\n    if (cell.col == 1) {\n      // drawRow(table, rowData);\n      if (rowData[0] && rowData[0] != \"id\") {\n        allRows.push(rowData);\n      }\n      rowData = [];\n    }\n    rowData.push(val);\n  }\n  if (rowData[0] && rowData[0] != \"id\") {\n    allRows.push(rowData);\n  }\n  return allRows;\n}\n\nexport function drawmap(map: mapboxgl.Map): void {\n  map.addControl(new mapboxgl.NavigationControl());\n  map.addControl(new mapboxgl.FullscreenControl());\n  // Add geolocate control to the map.\n  map.addControl(new mapboxgl.GeolocateControl({\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true\n  }));\n\n  // map.on('moveend', function (originalEvent) {\n  //   const { lat, lng } = map.getCenter();\n  //   console.log('A moveend event occurred.');\n  //   console.log({ lat, lng })\n\n\n  //   // eg https://localhost:3000\n  //   const location = window.location.origin\n  //   console.log({ location });\n\n  //   // @ts-ignore\n  //   window.history.pushState({\n  //     id: 'homepage'\n  //   }, 'Home | My App', `${location}/engage-yo-council-build/?lat=${lat}&lon=${lng}`);\n  // });\n}\nexport function removeMarkers(markers: mapboxgl.Marker[]): void {\n  markers.map(marker => marker.remove());\n}\n\nexport function drawMarkers(map: mapboxgl.Map, points: FeedbackItem[]): mapboxgl.Marker[] {\n\n  // Draw demo marker\n  // const popup = new mapboxgl.Popup({ offset: 25 })\n  //   .setHTML(\"<h1>Dummy pop up cycleway!</h1><br><a href='https://www.surveymonkey.com/r/popupcycleways'>https://www.surveymonkey.com/r/popupcycleways</a></h1>\")\n  // .setText(\"test\")\n\n  // const marker = new mapboxgl.Marker()\n  //   .setLngLat([151.2093, -33.8688])\n  //   .setPopup(popup) // sets a popup on this marker\n  //   .addTo(map);\n\n  const markers = points\n    .filter(point => point.Latitude && point.Longitude)\n    .map((feedbackItem: FeedbackItem) => {\n      return drawMarker(feedbackItem, map);\n    });\n\n  return markers;\n}","import styled from 'styled-components';\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 700;\n  width: inherit;\n  outline: 0;\n`;\nexport const Backdrop = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.3);\n  z-index: 500;\n`;\nexport const StyledModal = styled.div`\n  z-index: 100;\n  background: white;\n  position: relative;\n  margin: auto;\n  border-radius: 8px;\n`;\nexport const Header = styled.div`\n  border-radius: 8px 8px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.3rem;\n`;\nexport const HeaderText = styled.div`\n  color: #fff;\n  align-self: center;\n  color: lightgray;\n`;\nexport const CloseButton = styled.button`\n  font-size: 0.8rem;\n  border: none;\n  border-radius: 3px;\n  margin-left: 0.5rem;\n  background: none;\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Content = styled.div`\n  padding: 10px;\n  max-height: 30rem;\n  overflow-x: hidden;\n  overflow-y: auto;\n`;","import React, { FunctionComponent, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Wrapper,\n  Header,\n  StyledModal,\n  HeaderText,\n  CloseButton,\n  Content,\n  Backdrop,\n} from './modal.style';\nexport interface ModalProps {\n  isShown: boolean;\n  hide: () => void;\n  modalContent: JSX.Element;\n  headerText: string;\n}\nexport const Modal: FunctionComponent<ModalProps> = ({\n  isShown,\n  hide,\n  modalContent,\n  headerText,\n}) => {\n  const modal = (\n    <React.Fragment>\n      <Backdrop />\n      <Wrapper>\n        <StyledModal>\n          <Header>\n            <HeaderText>{headerText}</HeaderText>\n            <CloseButton onClick={hide}>X</CloseButton>\n          </Header>\n          <Content>{modalContent}</Content>\n        </StyledModal>\n      </Wrapper>\n    </React.Fragment>\n  );\n  return isShown ? ReactDOM.createPortal(modal, document.body) : null;\n};","import styled from 'styled-components';\nexport const ConfirmationButtons = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport const Message = styled.div`\n  font-size: 0.9rem;\n  margin-bottom: 10px;\n  text-align: center;\n`;\nexport const YesButton = styled.button`\n  width: 6rem;\n  background-color: yellow;\n  :hover {\n    background-color: red;\n  }\n`;\nexport const NoButton = styled.button`\n  width: 3rem;\n  background-color: lightgrey;\n  :hover {\n    background-color: grey;\n  }\n`;","import React, { FunctionComponent } from 'react';\nimport { ConfirmationButtons, Message, YesButton, NoButton } from './confirmation-modal.style';\ninterface ConfirmationModalProps {\n  onConfirm: () => void;\n  onCancel: () => void;\n  message: string;\n}\nexport const ConfirmationModal: FunctionComponent<ConfirmationModalProps> = (props) => {\n  return (\n    <React.Fragment>\n      <Message>{props.message}</Message>\n      <ConfirmationButtons>\n      </ConfirmationButtons>\n    </React.Fragment>\n  );\n};","import { useState } from 'react';\nexport const useModal = () => {\n  const [isShown, setIsShown] = useState<boolean>(false);\n  const toggle = () => setIsShown(!isShown);\n  return {\n    isShown,\n    toggle,\n  };\n};","import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { Modal } from './modal';\nimport { ConfirmationModal } from './confirmation-modal';\nimport { useModal } from './useModal';\n\nconst suggestedSearches = [\"Cycle\", \"Park\", \"Zoning\", \"Traffic\"];\n\ntype SearchInputProps = {\n  onSearchTermUpdated: (term: string) => void;\n};\n\nexport const SearchInput: FunctionComponent<SearchInputProps> = ({ onSearchTermUpdated }) => {\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n  const { isShown, toggle } = useModal();\n  const onConfirm = () => toggle();\n  const onCancel = () => toggle();\n\n  useEffect(() => {\n    onSearchTermUpdated(searchTerm);\n  }, [searchTerm]);\n\n  const renderSearchSuggestions = () => {\n\n    return suggestedSearches.map((suggestion) => (\n      <button onClick={() => setSearchTerm(suggestion)}>{suggestion}</button>\n    ));\n  };\n\n  return (\n    <>\n      <div id=\"search_container\">\n        <h3>Search:</h3>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setSearchTerm(e.target.value)\n          }\n          value={searchTerm}\n        />\n      </div>\n      <div id=\"search_suggestions\">{renderSearchSuggestions()}</div>\n      <p>Want to know about this project?</p>\n        <button onClick={toggle}>Learn More</button>\n      <Modal\n        isShown={isShown}\n        hide={toggle}\n        headerText=\"Find Out more\"\n        modalContent={\n          <ConfirmationModal\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            message=\"This is a hackathon project. We think its an awesome idea. If you would like your council to take this on, please email them\"\n          />\n        }\n      />\n\n    </>\n  );\n};\n","import * as React from \"react\";\nimport ReactMapGL, { NavigationControl } from \"react-map-gl\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./App.css\";\nimport { isCompositeComponent } from \"react-dom/test-utils\";\nimport {\n  drawmap,\n  FeedbackItem,\n  rowToFeedbackItem,\n  processData,\n  getDataFromSheet,\n  drawMarkers,\n  removeMarkers,\n} from \"./drawmap\";\nimport { SearchInput } from \"./SearchInput\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiamFrZWMiLCJhIjoiY2tkaHplNGhjMDAyMDJybW4ybmRqbTBmMyJ9.AR_fnEuka8-cFb4Snp3upw\";\ninterface State {\n  viewport: {\n    longitude: number;\n    latitude: number; // starting position\n    zoom: number;\n    // height: number;\n    // width: number;\n  };\n  map?: mapboxgl.Map;\n  points?: FeedbackItem[];\n  markers?: mapboxgl.Marker[];\n  filteredPoints?: FeedbackItem[];\n}\n\n\nconst params = new URLSearchParams(window.location.search)\nconst paramLat = params.get('lat');\nconst paramLon = params.get('lon')\n\nconst latitude = paramLat ? parseInt(paramLat) : -33.8688;\nconst longitude = paramLon ? parseInt(paramLon) : 151.2093;\n\nconsole.log(\"PARAMS\");\nconsole.log({lat: paramLat, lon: paramLon});\n\n// console.log({params});\n\nconst initialState: State = {\n  viewport: {\n    // longitude: 151.2093,\n    // latitude: -33.8688, // starting position\n    longitude,\n    latitude, // starting position\n    zoom: 13,\n    // height: 400,\n    // width: 400\n  },\n};\n\ntype Viewport = typeof initialState.viewport;\nexport class Map extends React.Component<{}, State> {\n  public state: State = initialState;\n\n  public componentDidMount() {\n    window.addEventListener(\"resize\", this.resize);\n    this.resize();\n  }\n\n  async UNSAFE_componentWillUpdate(nextProps: any, nextState: State) {\n    if (!nextState.map || !nextState.filteredPoints) {\n      return;\n    }\n    // If we haven't drawn any markers before, draw them AND the map\n    if (!this.state.markers && !nextState.markers) {\n      console.log(\"Initial draw of map\");\n      const { map, filteredPoints } = nextState;\n      drawmap(map);\n      const markers = drawMarkers(map, filteredPoints);\n      this.setState({\n        markers,\n      });\n    }\n    // If we HAVE drawn markers before, and the points are different, remove then draw them\n    if (\n      this.state.markers &&\n      this.state.filteredPoints !== nextState.filteredPoints\n    ) {\n      console.log(\"Redrawing markers\");\n      const { map, filteredPoints } = nextState;\n      removeMarkers(this.state.markers);\n      const markers = drawMarkers(map, filteredPoints);\n      this.setState({\n        markers,\n      });\n    }\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize);\n  }\n\n  public async componentWillMount() {\n    const data = await getDataFromSheet();\n    const spData = data.feed.entry;\n    const rows = processData(spData);\n    console.log(\"All raw rows:\");\n    console.log({ rows });\n\n    const feedbackItems: FeedbackItem[] = rows.map(rowToFeedbackItem);\n    console.log({ feedbackItems });\n    this.setState({\n      points: feedbackItems,\n      // Initially, show all points\n      filteredPoints: feedbackItems,\n    });\n  }\n  public updateViewport = (viewport: Viewport) => {\n    this.setState((prevState) => ({\n      viewport: { ...prevState.viewport, ...viewport },\n    }));\n  };\n\n  public resize = () => {\n    this.setState((prevState) => ({\n      viewport: {\n        ...prevState.viewport,\n        height: window.innerHeight,\n        // width: window.innerWidth,\n      },\n    }));\n  };\n\n  private inputChange = (text: string) => {\n    // private inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // const text: string = e.target.value;\n    console.log({ text });\n\n    if (!this.state.points) {\n      return;\n    }\n\n    const newFilteredPoints = this.state.points.filter((point) =>\n      point.Title?.toLowerCase().includes(text.toLowerCase())\n    );\n\n    console.log(\"Length of ALL points:\", this.state.points.length);\n    console.log(\"Length of new filtered points:\", newFilteredPoints.length);\n\n    this.setState({\n      // Initially, show all points\n      filteredPoints: newFilteredPoints,\n    });\n  };\n  private buttonClick = (e: any) => {\n    if (this.state.markers) {\n      removeMarkers(this.state.markers);\n    }\n  };\n\n  public render() {\n    const { viewport } = this.state;\n    return (\n      <div id=\"container\">\n        <div id=\"search_overlay\">\n          <SearchInput onSearchTermUpdated={this.inputChange} />\n        </div>\n        <div id=\"map\">\n          <ReactMapGL\n            width={\"100%\"}\n            height={\"100%\"}\n            className={\"mapClass\"}\n            {...viewport}\n            mapStyle={\"mapbox://styles/mapbox/streets-v11\"}\n            ref={(ref) =>\n              ref && !this.state.map && this.setState({ map: ref.getMap() })\n            }\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            onViewportChange={(v: Viewport) => this.updateViewport(v)}\n          >\n            <div style={{ position: \"absolute\", right: 30, bottom: 30 }}>\n              <NavigationControl onViewportChange={this.updateViewport} />\n            </div>\n          </ReactMapGL>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\nimport React, { Component, FunctionComponent, useState } from 'react';\nimport './index.css';\nimport {Map} from './map';\nimport * as serviceWorker from './serviceWorker';\nimport { Modal } from './modal';\nimport { ConfirmationModal } from './confirmation-modal';\nimport { useModal } from './useModal';\n\nconst App: FunctionComponent = () => {\n  const { isShown, toggle } = useModal();\n  const onConfirm = () => toggle();\n  const onCancel = () => toggle();\n  return (\n    <React.Fragment>\n        <Map />\n    </React.Fragment>\n  );\n};\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}