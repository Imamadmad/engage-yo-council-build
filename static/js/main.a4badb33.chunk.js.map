{"version":3,"sources":["mail.ts","Card.tsx","drawmap.tsx","SearchInput.tsx","map.tsx","serviceWorker.ts","index.tsx"],"names":["makeMailtoUri","data","encodeURI","mailAddress","encodeURIComponent","subject","body","Card","props","item","Email","Title","Link","style","display","src","height","width","margin","alt","href","target","MailtoElement","Councilname","Fulldescription","mailtoDataAgree","mailtoDataDisagree","rowToFeedbackItem","row","id","parseInt","Longitude","parseFloat","Latitude","Emailcontactname","Phonenumber","Surveylink","OpenUnderreviewclosed","processData","allRows","rowData","r","length","cell","val","col","push","drawmap","map","addControl","mapboxgl","NavigationControl","FullscreenControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","removeMarkers","markers","marker","remove","drawMarkers","points","filter","point","feedbackItem","popup","Popup","offset","setHTML","renderToString","Marker","setLngLat","setPopup","addTo","drawMarker","suggestedSearches","SearchInput","onSearchTermUpdated","useState","searchTerm","setSearchTerm","useEffect","type","onChange","e","value","suggestion","onClick","initialState","viewport","longitude","latitude","zoom","Map","state","updateViewport","setState","prevState","resize","window","innerHeight","inputChange","text","console","log","newFilteredPoints","includes","filteredPoints","buttonClick","addEventListener","this","nextProps","nextState","removeEventListener","Promise","resolve","reject","fetch","then","res","json","result","spData","feed","entry","rows","feedbackItems","className","mapStyle","ref","getMap","mapboxApiAccessToken","onViewportChange","v","position","right","bottom","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4badb33.chunk.js","sourcesContent":["export interface MailtoDataUnencoded {\n  mailAddress: string,\n  subject: string,\n  body: string\n}\n\nexport function makeMailtoUri(data: MailtoDataUnencoded) {\n  return `mailto:${encodeURI(data.mailAddress)}?subject=${encodeURIComponent(data.subject)}&body=${encodeURIComponent(data.body)}`;\n}\n","import React from 'react';\nimport { FeedbackItem } from './drawmap';\nimport { MailtoDataUnencoded, makeMailtoUri } from './mail';\n\ninterface Props {\n    item: FeedbackItem\n}\n\nexport default function Card(props: Props) {\n    const {item} = props;\n    const mailtoDataAgree: MailtoDataUnencoded | null = item.Email ? {\n        mailAddress: item.Email,\n        subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n        body: `I'm email to express my support for the proposal detailed at ${item.Link}`\n      } : null;\n      const mailtoDataDisagree: MailtoDataUnencoded | null = item.Email ? {\n        mailAddress: item.Email,\n        subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n        body: `I'm email to express my disagreement with the proposal detailed at ${item.Link}`\n      } : null;\n    return (\n        <div>\n            <div style={{\n                display: 'flex',\n            }}>\n                <img \n                    src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${item.Link}`}\n                    height={16}\n                    width={16}\n                    style={{margin: 6}}\n                    alt=\"icon\"\n                />\n                <h2 style={{margin: 0}}><a href={item.Link} target=\"_blank\" >{item.Title}</a></h2>\n            </div>\n            <MailtoElement item={item} />\n            <p>Council: {item.Councilname}</p>\n            <p>{item.Fulldescription}</p>\n        </div>\n    );\n}\n\nfunction MailtoElement(props: {item: FeedbackItem}) {\n  const item = props.item;\n  const mailtoDataAgree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my support for the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n  } : null;\n  const mailtoDataDisagree: MailtoDataUnencoded | null = item.Email ? {\n    mailAddress: item.Email,\n    subject: `Submission regarding ${item.Title || '<find the title on the council\\'s website>'}`,\n    body: `I'm emailing you to express my disagreement with the proposal detailed at ${item.Link}.\\nReplace this line with your comments to personalise the message!`\n\n  } : null;\n  return mailtoDataAgree && mailtoDataDisagree\n       ? (<p><a href={makeMailtoUri(mailtoDataAgree)}>I agree üëçüèø</a> / <a href={makeMailtoUri(mailtoDataDisagree)}>I disagree üëéüèΩ</a></p>)\n       : null;\n}\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { renderToString } from 'react-dom/server'\nimport Card from './Card';\n\nexport function getDataFromSheet(): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const url = 'https://spreadsheets.google.com/feeds/cells/1EWTcF12D3xEDRzAFtX_xhxZKwmWHI-88pGmQGGsKYR0/1/public/values?alt=json';\n    fetch(url)\n      .then(res => res.json())\n      .then(result => {\n        resolve(result);\n      });\n  });\n}\n\nexport type SurveyStatus = 'Open' | 'Closed' | 'Under review';\n\nexport interface FeedbackItem {\n  id: number;\n  Latitude: number;\n  Longitude: number;\n  Councilname?: string;\n  Title?: string,\n  Link?: string,\n  Emailcontactname?: string;\n  Email?: string;\n  Phonenumber?: string;\n  Surveylink?: string\n  Fulldescription?: string\n  OpenUnderreviewclosed?: SurveyStatus\n}\n\nexport function rowToFeedbackItem(row: string[]): FeedbackItem {\n  return {\n    id: parseInt(row[0]),\n    Councilname: row[1],\n    Longitude: parseFloat(row[2]),\n    Latitude: parseFloat(row[3]),\n    Title: row[4],\n    Link: row[5],\n    Emailcontactname: row[6],\n    Email: row[7],\n    Phonenumber: row[8],\n    Surveylink: row[9],\n    Fulldescription: row[10],\n    OpenUnderreviewclosed: row[11] as SurveyStatus, // YOLO\n  }\n}\n\nexport function drawMarker(item: FeedbackItem, map: mapboxgl.Map): mapboxgl.Marker {\n  const { Title, Link, Latitude, Longitude } = item;\n  var popup = new mapboxgl.Popup({ offset: 25 })\n    .setHTML(renderToString(\n      <Card item={item} />\n    ));\n\n  return new mapboxgl.Marker()\n    .setLngLat([Latitude, Longitude])\n    .setPopup(popup) // sets a popup on this marker\n    .addTo(map);\n}\n// Data is the spdata thing, returns list of things\nexport function processData(data: any): string[][] {\n  // var table = drawTable(parent);\n  let allRows = [];\n  var rowData = [];\n\n  for (var r = 0; r < data.length; r++) {\n    var cell = data[r][\"gs$cell\"];\n    var val = cell[\"$t\"];\n    if (cell.col == 1) {\n      // drawRow(table, rowData);\n      if (rowData[0] && rowData[0] != \"id\") {\n        allRows.push(rowData);\n      }\n      rowData = [];\n    }\n    rowData.push(val);\n  }\n  if (rowData[0] && rowData[0] != \"id\") {\n    allRows.push(rowData);\n  }\n  return allRows;\n}\n\nexport function drawmap(map: mapboxgl.Map): void {\n  map.addControl(new mapboxgl.NavigationControl());\n  map.addControl(new mapboxgl.FullscreenControl());\n  // Add geolocate control to the map.\n  map.addControl(new mapboxgl.GeolocateControl({\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true\n  }));\n}\nexport function removeMarkers(markers: mapboxgl.Marker[]): void {\n  markers.map(marker => marker.remove());\n}\n\nexport function drawMarkers(map: mapboxgl.Map, points: FeedbackItem[]): mapboxgl.Marker[] {\n\n  // Draw demo marker\n  // const popup = new mapboxgl.Popup({ offset: 25 })\n  //   .setHTML(\"<h1>Dummy pop up cycleway!</h1><br><a href='https://www.surveymonkey.com/r/popupcycleways'>https://www.surveymonkey.com/r/popupcycleways</a></h1>\")\n  // .setText(\"test\")\n\n  // const marker = new mapboxgl.Marker()\n  //   .setLngLat([151.2093, -33.8688])\n  //   .setPopup(popup) // sets a popup on this marker\n  //   .addTo(map);\n\n  const markers = points\n    .filter(point => point.Latitude && point.Longitude)\n    .map((feedbackItem: FeedbackItem) => {\n      return drawMarker(feedbackItem, map);\n    });\n\n  return markers;\n}","import React, { FunctionComponent, useState, useEffect } from \"react\";\n\nconst suggestedSearches = [\"Cycle\", \"Park\", \"Zoning\", \"Traffic\"];\n\ntype SearchInputProps = {\n  onSearchTermUpdated: (term: string) => void;\n};\n\nexport const SearchInput: FunctionComponent<SearchInputProps> = ({ onSearchTermUpdated }) => {\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n\n  useEffect(() => {\n    onSearchTermUpdated(searchTerm);\n  }, [searchTerm]);\n\n  const renderSearchSuggestions = () => {\n\n    return suggestedSearches.map((suggestion) => (\n      <button onClick={() => setSearchTerm(suggestion)}>{suggestion}</button>\n    ));\n  };\n\n  return (\n    <>\n      <div id=\"search_container\">\n        <h3>Search:</h3>\n        <input\n          type=\"text\"\n          onChange={(e) =>\n            setSearchTerm(e.target.value)\n          }\n          value={searchTerm}\n        />\n      </div>\n      <div id=\"search_suggestions\">{renderSearchSuggestions()}</div>\n    </>\n  );\n};\n","import * as React from 'react';\nimport ReactMapGL, { NavigationControl } from 'react-map-gl';\nimport mapboxgl from 'mapbox-gl';\nimport './App.css';\nimport { isCompositeComponent } from 'react-dom/test-utils';\nimport { drawmap, FeedbackItem, rowToFeedbackItem, processData, getDataFromSheet, drawMarkers, removeMarkers } from './drawmap'\nimport { SearchInput } from './SearchInput';\n\nconst MAPBOX_TOKEN =\n    \"pk.eyJ1IjoiamFrZWMiLCJhIjoiY2tkaHplNGhjMDAyMDJybW4ybmRqbTBmMyJ9.AR_fnEuka8-cFb4Snp3upw\";\ninterface State {\n    viewport: {\n        longitude: number;\n        latitude: number; // starting position\n        zoom: number;\n        // height: number;\n        // width: number;\n    },\n    map?: mapboxgl.Map;\n    points?: FeedbackItem[];\n    markers?: mapboxgl.Marker[];\n    filteredPoints?: FeedbackItem[];\n}\nconst initialState: State = {\n    viewport: {\n        longitude: 151.2093,\n        latitude: -33.8688, // starting position\n        zoom: 13,\n        // height: 400,\n        // width: 400\n    },\n};\n\ntype Viewport = typeof initialState.viewport;\nexport class Map extends React.Component<{}, State> {\n    public state: State = initialState;\n\n    public componentDidMount() {\n        window.addEventListener(\"resize\", this.resize);\n        this.resize();\n    }\n\n    async UNSAFE_componentWillUpdate(nextProps: any, nextState: State) {\n        if (!nextState.map || !nextState.filteredPoints) {\n            return;\n        }\n        // If we haven't drawn any markers before, draw them AND the map\n        if (!this.state.markers && !nextState.markers) {\n            console.log(\"Initial draw of map\");\n            const { map, filteredPoints } = nextState;\n            drawmap(map);\n            const markers = drawMarkers(map, filteredPoints);\n            this.setState({\n                markers\n            });\n        }\n        // If we HAVE drawn markers before, and the points are different, remove then draw them\n        if (this.state.markers && this.state.filteredPoints !== nextState.filteredPoints) {\n            console.log(\"Redrawing markers\");\n            const { map, filteredPoints } = nextState;\n            removeMarkers(this.state.markers);\n            const markers = drawMarkers(map, filteredPoints);\n            this.setState({\n                markers\n            });\n        }\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.resize);\n    }\n\n    public async componentWillMount() {\n        const data = await getDataFromSheet();\n        const spData = data.feed.entry;\n        const rows = processData(spData);\n        console.log(\"All raw rows:\");\n        console.log({ rows });\n\n        const feedbackItems: FeedbackItem[] = rows.map(rowToFeedbackItem)\n        console.log({ feedbackItems });\n        this.setState({\n            points: feedbackItems,\n            // Initially, show all points\n            filteredPoints: feedbackItems\n        })\n    }\n    public updateViewport = (viewport: Viewport) => {\n        this.setState((prevState) => ({\n            viewport: { ...prevState.viewport, ...viewport },\n        }));\n    };\n\n    public resize = () => {\n        this.setState((prevState) => ({\n            viewport: {\n                ...prevState.viewport,\n                height: window.innerHeight,\n                // width: window.innerWidth,\n            },\n        }));\n    };\n\n    private inputChange = (text: string) => {\n        // private inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        // const text: string = e.target.value;\n        console.log({ text });\n\n        if (!this.state.points) {\n            return;\n        }\n\n        const newFilteredPoints = this.state.points\n            .filter(point => point.Title?.includes(text))\n\n        console.log(\"Length of ALL points:\", this.state.points.length);\n        console.log(\"Length of new filtered points:\", newFilteredPoints.length);\n\n        this.setState({\n            // Initially, show all points\n            filteredPoints: newFilteredPoints\n        })\n    }\n    private buttonClick = (e: any) => {\n        if (this.state.markers) {\n            removeMarkers(this.state.markers);\n        }\n    }\n\n    public render() {\n        const { viewport } = this.state;\n        return (\n            <div id=\"container\">\n                <div id=\"search_overlay\">\n                    <SearchInput\n                        onSearchTermUpdated={this.inputChange}\n                    />\n                </div>\n                <div id=\"map\">\n                    <ReactMapGL\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        className={\"mapClass\"}\n                        {...viewport}\n                        mapStyle={\"mapbox://styles/mapbox/streets-v11\"}\n                        ref={(ref) =>\n                            ref && !this.state.map && this.setState({ map: ref.getMap() })\n                        }\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\n                        onViewportChange={(v: Viewport) => this.updateViewport(v)}\n                    >\n                        <div style={{ position: \"absolute\", right: 30, bottom: 30 }}>\n                            <NavigationControl onViewportChange={this.updateViewport} />\n                        </div>\n                    </ReactMapGL>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Map} from './map';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}